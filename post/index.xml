<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Lazily instantiated</title>
    <link>https://aidaissayeva.github.io/post/</link>
    <description>Recent content in Posts on Lazily instantiated</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright Â© 2019, Aida Issayeva</copyright>
    <lastBuildDate>Mon, 30 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://aidaissayeva.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Common practices of writing extension functions in Kotlin</title>
      <link>https://aidaissayeva.github.io/post/common-practices-of-writing-extension-functions/</link>
      <pubDate>Mon, 30 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://aidaissayeva.github.io/post/common-practices-of-writing-extension-functions/</guid>
      <description>This article is based off my talk I gave at Droidcon SF this year.
 Kotlin is well-known for null-safety and extension functions features among android developers. Extension functions give an ability to make a new functionality of an extending class without making changes to it, and defined outside of the class. They are very beneficial when you want to tweak an api, that can&#39;t be modified.
Let&#39;s go over some sad examples of making extensions:</description>
    </item>
    
  </channel>
</rss>